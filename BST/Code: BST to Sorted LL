Given a BST, convert it into a sorted linked list. Return the head of LL.
Input format :
Elements in level order form (separated by space)
(If any node does not have left or right child, take -1 in its place)
Output Format :
Linked list elements (separated by space)
Sample Input :
8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1
Sample Output :
2 5 6 7 8 10
=---------------Solution------------------------------------/nabajyoti 
class foo{
    public:
    Node<int>* head;
	Node<int>* tail;
};

foo constructhelper(BinaryTreeNode<int>* root){
    if(root==NULL){
        foo f;
        f.head=NULL;
        f.tail=NULL;
        return f;
    }
    Node<int>* x=new Node<int>(root->data);
    foo left=constructhelper(root->left);
    foo right=constructhelper(root->right);
    foo result;
    if(left.head==NULL){
        result.head=x;
        result.head->next=right.head;
        if(right.tail==NULL){
            result.tail=x;
        }else{
            result.tail=right.tail;
        }
    }else{
        result.head=left.head;
        left.tail->next=x;
        x->next=right.head;
        if(right.tail==NULL){
            result.tail=x;
        }else{
            result.tail=right.tail;
        }
        
    }
    return result;
    
}

Node<int>* constructBST(BinaryTreeNode<int>* root) {
    /* Don't write main().
     * Don't read input, it is passed as function argument.
     * Return output and don't print it.
     * Taking input and printing output is handled automatically.
     */
    foo result=constructhelper(root);
    return result.head;
    
}
