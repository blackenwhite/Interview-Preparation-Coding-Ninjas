Given a sorted integer array A of size n which contains all unique elements. You need to construct a balanced BST from this input array. Return the root of constructed BST.
Note : If array size is even, take first mid as root.
Input format :
Line 1 : Integer n (Size of array)
Line 2 : Array elements (separated by space)
Output Format :
BST elements (in pre order traversal, separated by space)
Sample Input :
7
1 2 3 4 5 6 7
Sample Output :
4 2 1 3 6 5 7 
---------------------Solution----------------------/nabajyoti majumdar
BinaryTreeNode<int>* constructhelper(int* input,int start,int end){
    if(start>end) return NULL;
    if(start==end){
        BinaryTreeNode<int>* root=new BinaryTreeNode<int>(input[start]);
        return root;
    }
    int mid=(start+end)/2;
    BinaryTreeNode<int>* root=new BinaryTreeNode<int>(input[mid]);
    BinaryTreeNode<int>* left=constructhelper(input,start,mid-1);
    BinaryTreeNode<int>* right=constructhelper(input,mid+1,end);
    root->left=left;
    root->right=right;
    return root;
    
}

BinaryTreeNode<int>* constructTree(int *input, int n) {
    /* Don't write main().
     * Don't read input, it is passed as function argument.
     * Return output and don't print it.
     * Taking input and printing output is handled automatically.
     */
    
    if(n==0) return NULL;
    /*if(n==1){
        BinaryTreeNode<int>* root=new BinaryTreeNode<int>(n[0]);
        return root;
    }*/
    return constructhelper(input,0,n-1);

}
