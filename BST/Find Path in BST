Given a BST and an integer k. Find and return the path from the node with data k and root (if a node with data k is present in given BST). Return null otherwise.
Assume that BST contains all unique elements.
Input Format :
Line 1 : Elements in level order form (separated by space)
(If any node does not have left or right child, take -1 in its place)
Line 2 : Integer k
Output Format :
Path from node k to root
Sample Input :
8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1
2
Sample Output :
2
5
8
------------------------Solution----------------------/nabajyoti majumdar

vector<int>* findPath(BinaryTreeNode<int> *root , int data){
    /* Don't write main().
     * Don't read input, it is passed as function argument.
     * Return output and don't print it.
     * Taking input and printing output is handled automatically.
     */
    vector<int>* ans=new vector<int>();
    if(root==NULL) return ans;
    if(root->data==data){
        ans->push_back(data);
        return ans;
    }
    vector<int>* left=findPath(root->left,data);
    vector<int>* right=findPath(root->right,data);
    if(left->size()!=0) {
        left->push_back(root->data);
        return left;
    }
    if(right->size()!=0){
        right->push_back(root->data);
        return right;
    }
    return ans;

}
