Given a binary tree, write code to create a separate linked list for each level. You need to return the array which contains head of each level linked list.
Input format :

Elements in level order form (separated by space). If any node does not have left or right child, take -1 in its place.

Output format : Each level linked list is printed in new line (elements separated by space).

Sample Input :
5 6 10 2 3 -1 -1 -1 -1 -1 9 -1 -1
Sample Output :
5 
6 10 
2 3 
9
-----------------------Solution---------------/nabajyoti majumdar
#include <bits/stdc++.h>
using namespace std;

void insert(node<int>* head,node<int>* head1){
    if(head1==NULL) return;
    if(head==NULL){
        head=head1;
        return;
    }
    node<int>* temp=head;
    while(temp->next!=NULL){
        temp=temp->next;
    }
    temp->next=head1;
    return;
}

void dfs(BinaryTreeNode<int>* root,vector<node<int>*> &ans,int depth){
    if (root==NULL){
        return;
    }
    if(depth>ans.size()){
        node<int>* head1=new node<int>(root->data);
        ans.push_back(head1);
    }
    else{
        node<int>* head1=new node<int>(root->data);
        insert(ans[depth-1],head1);
        
    }
    dfs(root->left,ans,depth+1);
    dfs(root->right,ans,depth+1);
    return ;
}

vector<node<int>*> createLLForEachLevel(BinaryTreeNode<int> *root) {
    // Write your code here
    vector<node<int>*> ans;
    dfs(root,ans,1);
    return ans;

}
