Sort a given linked list using Merge Sort.
You don't need to print the elements, just sort the elements and return the head of updated LL.
Input format :
Linked list elements (separated by space and terminated by -1)
Output format :
Updated LL elements (separated by space)
Constraints :
1 <= Length of LL <= 1000
Sample Input 1 :
1 4 5 2 -1
Sample Output 1 :
1 2 4 5
--------------------Solution----------------------
//nabajyoti majumdar
node* merge(node *head1, node *head2) {
    if(head1==NULL) return head2;
    if(head2==NULL) return head1;
    node* fh=NULL;
    node* ft=NULL;
    
    while(head1!=NULL && head2!=NULL){
        if(head1->data<=head2->data){
            if(fh==NULL){
                fh=head1;
                ft=head1;
            }else{
               ft->next=head1;
                ft=head1;
            }
            head1=head1->next;
        }else{
            if(fh==NULL){
                fh=head2;
                ft=head2;
            }else{
                ft->next=head2;
                ft=head2;
            }
            head2=head2->next;
        }
        
    }
    
    while(head1!=NULL){
        ft->next=head1;
        ft=head1;
        head1=head1->next;
    }
    
    while(head2!=NULL){
        ft->next=head2;
        ft=head2;
        head2=head2->next;
    }
    
    return fh;
}

node* mergeSort(node *head) {
    if(head==NULL || head->next==NULL) return head;
    //write your code here
    node* slow=head;
    node* fast=head->next;
    while(fast!=NULL && fast->next!=NULL){
        slow=slow->next;
        fast=fast->next->next;
    }
    node* second=mergeSort(slow->next);
    slow->next=NULL;
    node* first=mergeSort(head);
    node* ans=merge(first,second);
    return ans;
}
