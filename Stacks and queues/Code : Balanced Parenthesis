Given a string expression, check if brackets present in the expression are balanced or not. Brackets are balanced if the bracket which opens last, closes first.
You need to return true if it is balanced, false otherwise.
Note: This problem was asked in initial rounds in Facebook
Sample Input 1 :
{ a + [ b+ (c + d)] + (e + f) }
Sample Output 1 :
true
Sample Input 2 :
{ a + [ b - c } ]
Sample Output 2 :
false

----------------------Solution----------------
#include<bits/stdc++.h>
using namespace std;

bool checkBalanced(char *exp) {
	// Write your code here
    stack<char> s;
    int len=strlen(exp);
    for (int i=0;i<len;i++){
        if(exp[i]=='(' || exp[i]=='{' || exp[i]=='['){
            s.push(exp[i]);
        }
        else if(exp[i]==')' || exp[i]=='}' ||exp[i]==']'){
            if(!s.empty())
            {char c=s.top();
            s.pop();
            if(c=='(' && exp[i]!=')') return false;
            if(c=='{' && exp[i]!='}') return false;
            if(c=='[' && exp[i]!=']') return false;
            continue;}
            else{
                return false;
            }
        }else{
            continue;
        }
    }
    if(s.size()==0) return true;
    return false;

}
