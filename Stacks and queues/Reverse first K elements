Given a queue and an integer k, reverse first k elements. Return the updated queue.
Do the problem in O(n) complexity.
Input Format :
Line 1 : Integer N, Size of Queue
Line 2 : Queue Elements (separated by space)
Line 3 : Integer k
Output Format:
Updated Queue elements
Contraints :
1<= N <=10000
Sample Input 1:
5
1 2 3 4 5
3
Sample Output 1:
3 2 1 4 5
Sample Input 2:
7
3 4 2 5 6 7 8
7
Sample Output 2:
8 7 6 5 2 4 3
----------------------------solution-----------------
// nabajyoti majumdar
#include <cmath>
#include <iostream>
#include<bits/stdc++.h>
using namespace std;

queue<int> reverseKElements(queue<int> input, int k) {
	/* Don't write main().
     * Don't read input, it is passed as function argument.
     * Return output and don't print it.
     * Taking input and printing output is handled automatically.
     */
    stack<int> stk;
    int i=0;
    while(i<k){
        stk.push(input.front());
        input.pop();
        i++;
    }
    queue<int> q;
    while(!input.empty()){
        q.push(input.front());
        input.pop();
        
    }
    
    while(!stk.empty()){
        input.push(stk.top());
        stk.pop();
    }
    
    while(!q.empty()){
        input.push(q.front());
        q.pop();
    }
    return input;
}
