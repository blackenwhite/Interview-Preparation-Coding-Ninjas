You are given 2 strings: String P and String Q. Your task is to convert P into Q, if possible, using the following operation:
You can pick any character of P and put it in front of the string. In other words, you can pick any character and put it  at 0th index of the string.
If it is possible, find the minimum number of operations to convert string P into Q. If it is not possible to convert P into Q, print -1.
Input Format:
The first and only line of input contains two space separated strings P and Q. The length of strings lie in the range: [1, 1000].
Constraints
Time Limit: 1 second
Output format:
The first and only line of output must contain minimum number of operations required to convert P into Q. If it is not possible to convert P into Q, print -1.
Sample Input 1:
ABCD DACB
Sample Output 1:
3
Explanation:
In first step, ABCD -> CABD
In second step, CABD -> ACBD
In third step, ACBD -> DACB
----------------------------Solution--------------------------------
Checking whether a string can be transformed to another is simple. We need to check whether both strings have same number of characters and same set of characters. This can be easily done by creating a count array for first string and checking if second string has same count of every character.
How to find minimum number of operations when we are sure that we can transform A to B? The idea is to start matching from last characters of both strings. If last characters match, then our task reduces to n-1 characters. If last characters don’t match, then find the position of B’s mismatching character in A. The difference between two positions indicates that these many characters of A must be moved before current character of A.
Below is complete algorithm.
1) Find if A can be transformed to B or not by first creating a count array for all characters of A, then checking with B if B has same count for every character.
2) Initialize result as 0.
2) Start traversing from end of both strings.
……a) If current characters of A and B match, i.e., A[i] == B[j]
………then do i = i-1 and j = j-1
……b) If current characters don’t match, then search B[j] in remaining
………A. While searching, keep incrementing result as these characters
………must be moved ahead for A to B transformation.

C++ code
#include<bits/stdc++.h> 
using namespace std; 
  
// Function to find minimum number of operations required to transform 
// A to B. 
int minOps(string& A, string& B) 
{ 
    int m = A.length(), n = B.length(); 
  
     // This parts checks whether conversion is 
     // possible or not 
    if (n != m) 
       return -1; 
    int count[256]; 
    memset(count, 0, sizeof(count)); 
    for (int i=0; i<n; i++)   // count characters in A 
       count[B[i]]++; 
    for (int i=0; i<n; i++)   // subtract count for 
       count[A[i]]--;         // every character in B 
    for (int i=0; i<256; i++)   // Check if all counts become 0 
      if (count[i]) 
         return -1; 
  
    // This part calculates the number of operations required 
    int res = 0; 
    for (int i=n-1, j=n-1; i>=0; ) 
    { 
        // If there is a mismatch, then keep incrementing 
        // result 'res' until B[j] is not found in A[0..i] 
        while (i>=0 && A[i] != B[j]) 
        { 
            i--; 
            res++; 
        } 
  
        // If A[i] and B[j] match 
        if (i >= 0) 
        { 
            i--; 
            j--; 
        } 
    } 
    return res; 
} 
  
// Driver program 
int main() 
{ 
    string A = "EACBD"; 
    string B = "EABCD"; 
    cout << "Minimum number of operations "
            "required is " << minOps(A, B); 
    return 0; 
} 
