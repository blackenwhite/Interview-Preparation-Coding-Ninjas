Given a generic tree and an integer n. Find and return the node with next larger element in the Tree i.e. find a node with value just greater than n.
Return NULL if no node is present with value greater than n.
Input format :

Line 1 : Integer n

Line 2 : Elements in level order form separated by space (as per done in class). Order is -

Root_data, n (No_Of_Child_Of_Root), n children, and so on for every element

Output format : Node with value just greater than n.

Sample Input 1 :
18
10 3 20 30 40 2 40 50 0 0 0 0 
Sample Output 1 :
20
Sample Input 2 :
21
10 3 20 30 40 2 40 50 0 0 0 0 
Sample Output 2:
30
----------------------------Solution-------------------
TreeNode<int>* nextLargerElement(TreeNode<int> *root, int n) {
    // Write your code here
    if(root==NULL) return root;
    if(root->numChildren()==0){
        if(root->data>n) return root;
        else return NULL;
    }
    TreeNode<int>* curr=NULL;
    if(root->data>n){
        curr=root;
    }
    for (int i=0;i<root->numChildren();i++){
        TreeNode<int>* desc=nextLargerElement(root->getChild(i),n);
        if(desc!=NULL){
            if(curr==NULL) curr=desc;
            if(curr->data>desc->data) curr=desc;
        }
    }
    return curr;

}
