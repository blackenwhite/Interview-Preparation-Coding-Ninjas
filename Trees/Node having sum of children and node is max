Given a tree, find and return the node for which sum of data of all children and the node itself is maximum. In the sum, data of node itself and data of immediate children is to be taken.
Input format :

Line 1 : Elements in level order form separated by space (as per done in class). Order is -

Root_data, n (No_Of_Child_Of_Root), n children, and so on for every element

Output format : Node with maximum sum.

Sample Input 1 :
5 3 1 2 3 1 15 2 4 5 1 6 0 0 0 0
Sample Output 1 :
1
--------------------Solution---------------------
int NodeSum(TreeNode<int>* root){
    if(root==NULL)
        return 0;
    
    int sum=root->data;
    
    for(int i=0;i<root->numChildren();i++)
        sum+=root->getChild(i)->data;
    return sum;
}

TreeNode<int>* maxSumNode(TreeNode<int> *root){
    // Write your code here
    
    if(root==NULL)
        return NULL;
    if(root->numChildren()==0)
        return root;
    
    TreeNode<int>* cur=root;
    int cur_sum=NodeSum(cur);
    for(int i=0;i<root->numChildren();i++){
        
        TreeNode<int> *ans=maxSumNode(root->getChild(i));
        
        int sum1=NodeSum(ans);
        if(cur_sum<sum1){
            cur_sum=sum1;
            cur=ans;
        }
        
    }
    
    return cur;
}
